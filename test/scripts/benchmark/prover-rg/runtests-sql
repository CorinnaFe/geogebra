#!/bin/bash
# Creates a benchmark output for the prover in CSV format to stdout,
# and also in HTML format into html/.
# @author Zoltan Kovacs <zoltan@geogebra.org>

# Setting defaults.
MY_VERSION=2.4

DEBUG=0 # In tmp/ there can be some log, if you set this to 1.
DBDEBUG=0
TIMEOUT=60
PROVERS="Classic5_m Classic5_t"
REALGEOMWSREMOTEURL="http\\://localhost\\:8765"

GEOGEBRADIR=../../../../
WEBCODEBASEDIR=$GEOGEBRADIR/web/war/web3d
ABSWEBDIR=`readlink -f $WEBCODEBASEDIR`

# Create database if it does not exist
test -r sqlite3db || ./createdb || exit $?

sql_provers() {
 # Reads prover names from the SQL database.
 sqlite3 sqlite3db "select name from provers;" | awk '{printf "%s ", $0}'
 }

usage() {
 echo "$0 - a benchmarking tool for GeoGebra's theorem prover subsystem"
 echo "Usage:"
 echo " xvfb-run $0 [options]"
 echo "  where options can be as follows (defaults in parentheses):"
 echo "   -d           put some debugging logs into tmp/"
 echo "   -b           save debugging information in the database"
 echo "   -t <number>  timeout: exit from a single test after the given number of seconds ($TIMEOUT)"
 echo "   -p <list>    space separated list of prover engines to test ($PROVERS)"
 echo "   -R <url>     use 'url' to use non-default RealGeomWS ($REALGEOMWSREMOTEURL)"
 echo "   -h           show this help, then exit"
 echo "   -v           print script version, then exit"
 echo "   -V           print available provers from the database, then exit"
 exit 0
 }

version() {
 echo "$0 version $MY_VERSION"
 exit 0
 }

while getopts "t:p:R:dbhvV" OPT; do
 case $OPT in
  t)
   TIMEOUT="$OPTARG"
   ;;
  d)
   DEBUG=1
   ;;
  b)
   DBDEBUG=1
   ;;
  p)
   PROVERS="$OPTARG"
   ;;
  R)
   REALGEOMWSREMOTEURL="$OPTARG"
   ;;
  h)
   usage
   ;;
  v)
   version
   ;;
  V)
   PROVERS=`sql_provers`
   echo "Provers are: $PROVERS"
   exit 0
   ;;

 esac
done

RUNDIR=$GEOGEBRADIR/desktop/build/install/desktop/bin # run the "installDist" task in Gradle first
BINBASE=./desktop
ABSGEOGEBRADIR=`readlink -f $GEOGEBRADIR`
export JAVA_OPTS="-Djava.library.path=$ABSGEOGEBRADIR/desktop/build"


# Put name of the filters into $@
shift $((OPTIND-1))

PROVERSNO=`echo $PROVERS | wc -w`
THISDIR=`dirname $0`
MYDIR=`cd $THISDIR; pwd`
mkdir -p $MYDIR/tmp
LOGFILE=$MYDIR/tmp/.test.log
REGRESSIONFILE=$MYDIR/tmp/.regression.out

# Testing prerequisites:
prereq () {
 which $1 2>&1 >/dev/null || {
  echo "FATAL: No '$1' executable found. $2"
  exit 1
  }
 }

prereq unzip
prereq zip
prereq timeout

REVISION=`git log --oneline | cut -f1 -d" "`
if [ "$REVISION" != "" ]; then
 REVISION=" ($REVISION)"
 fi
# public static final String VERSION_STRING = "5.0.122.0";
VERSION=`cat $GEOGEBRADIR/common/src/main/java/org/geogebra/common/GeoGebraConstants.java |\
grep " VERSION_STRING =" | awk '{print $7}' | sed s/\"//g | sed s/";"//`

# Title
DATE=`date "+%Y-%m-%d %H:%M"`
HOST=`hostname`
HWINFO=`which hwinfo 2>&1 >/dev/null`
if [ "$HWINFO" = "" ]; then
 INFO=`lshw -quiet -class processor 2>/dev/null | grep product | cut -d: -f2`
else
 INFO=`hwinfo --short --cpu 2>&1 | grep CPU`
 fi

machine="$HOST, $INFO"

if [ "$BUILD_NUMBER" = "" ]; then
 BUILD_NUMBER=`date +%Y%m%d%H%M%S`
 fi
if [ "$GIT_REVISION" = "" ]; then
 GIT_REVISION=null
 fi
if [ "$BUILD_URL" = "" ]; then
 BUILD_URL=null
 fi

cd $MYDIR
test sqlite3db || ./createdb

sqlite3 sqlite3db "insert into builds (build_number, git_revision, build_url, machine)
values ('$BUILD_NUMBER', '$GIT_REVISION', '$BUILD_URL', '$machine')"

# Header
echo -n "Test file;"
echo
for j in $PROVERS; do
 rm -f $MYDIR/tmp/rinput-$j
 done

# Content
TESTS=0
for i in `find -name '*.ggb' | grep -v ggb-manipulator | sort`; do
 TESTS=$((TESTS+1))
 # Creating thumbnail:
 cd $MYDIR
 DIRNAME=`dirname $i | sed s/"^\.\/tests\/"/""/`
 TEST=`basename $i`
 echo -n "$TEST;"
 TEST=`echo $TEST | sed s/".ggb"//`
 sqlite3 sqlite3db "insert into testcases (name) values ('$TEST')" 2>/dev/null # ignore error

 declare -A RESULTDATA
 declare -A RESULTCLASSDATA
 declare -A CELLCOLORDATA
 declare -A TIMEDATA
 BESTTIME=""
 WORSTTIME=""
 BESTPROVER=""
 WORSTPROVER=""

 for j in $PROVERS; do
  cd $MYDIR; cd $RUNDIR
  ENGINE=`echo $j | cut -f1 -d_`
  unset METHOD
  if [[ $j == *"_"* ]]; then
   METHOD=`echo $j | cut -f2 -d_`
   fi
  unset RWSOPTS

  # Testing:
  start_unixtime=`date +%s`
  if [ "$ENGINE" = "Classic6" ]; then # currently not implemented
   test -d $ABSWEBDIR || {
    echo; echo "FATAL: folder $ABSWEBDIR does not exist. You have to compile web platform first."
    exit 1
    }

   # 1. Preparation of test folder in Cypress
   cd $MYDIR
   UITESTDIR=../../../../uitest
   PROVEDIR=$UITESTDIR/cypress/integration/Prove
   rm -fr $PROVEDIR
   mkdir -p $PROVEDIR

   # 2. Checking if ggb-manipulator is present
   test -x ggb-manipulator || {
    echo "Get ggb-manipulator from https://github.com/kovzol/ggb-manipulator first."
    exit 1
    }

   # 3. Creating a test file for Cypress
   cd ggb-manipulator
   BASE64IN=`cat ../$i | base64 -w0`
   BASE64OUT=`echo $BASE64IN | ./filter cypressize`
   PROVE=`./selector get-prove ../$i`
   echo "describe('$TEST', () => {
    beforeEach(() => {
        cy.visit('index.html');
        cy.get('body.application').click(10,10);
        cy.window().then((win) => {
            win.ggbApplet.setAxesVisible(false, false);
            win.ggbApplet.setGridVisible(false);
            var result = win.ggbApplet.evalCommandCAS('1+1');
            });
        cy.wait(5000);
    });

    afterEach(cy.setSaved);

    it('Test', () => {
        cy.window().then((win) => {
            var ggbFile = '$BASE64OUT';
            win.ggbApplet.setBase64(ggbFile);
            });
        cy.wait(5000);
        cy.window().then((win) => {
            win.ggbApplet.evalCommand('result=Prove($PROVE)');
            });
    });
}); " > ../$PROVEDIR/$TEST.spec.js
   cd ..
   # 4. Starting Cypress
   timeout $((TIMEOUT)) ./run-cypress-suite-headless >tmp/.test.stdout 2>tmp/.test.stderr

   RETVAL=$?
   # We add 2 dummy columns...
   # "value": "Benchmarking: 423 ms"
   cat $MYDIR/tmp/.test.stdout | grep Benchmarking | sed s/Benchmarking/"1 2 Benchmarking"/ > $LOGFILE
   grep --silent "OUTPUT for Prove:" $MYDIR/tmp/.test.stdout && \
    tac $MYDIR/tmp/.test.stdout | grep "OUTPUT for Prove:" | head -1 | sed 's/\(.*\) = \(.*\)/OUTPUT for Prove or ProveDetails == null = \2/' > $REGRESSIONFILE
   grep --silent "STATEMENT IS UNKNOWN" $MYDIR/tmp/.test.stdout && echo "Prove or ProveDetails == null = undefined" > $REGRESSIONFILE
   # List k = ProveDetails[j] == null = true "AreCollinear[D,E,A]", "AreEqual[f,k_1]", "AreEqual[f,l]", "AreParallel[d,e]", "AreParallel[f,g]", "AreParallel[h,i]"
   RESULT=`cat $REGRESSIONFILE | grep Prove | sed s/" null ="//g | sed s/'"'//g | sed 's/\(.*\) == \(.*\)/\2/' | sed s/*/·/g`
   grep --silent RuntimeError: $MYDIR/tmp/.test.stdout && {
     echo "Prove or ProveDetails == null = undefined" > $REGRESSIONFILE
     RESULT=error
     }
   }

  else
   ENABLE=true
   if [ "$METHOD" = "t" ]; then
    CAS=tarski
   else
    if [ "$METHOD" = "" ]; then
     CAS=""
     ENABLE=false
    else
     CAS=mathematica
     fi
    fi
   timeout $TIMEOUT $BINBASE \
    --prover=timeout:$TIMEOUT --realgeomws=enable:$ENABLE,remoteurl:${REALGEOMWSREMOTEURL},timeout:$TIMEOUT,cas:$CAS,test:false \
    --logFile=$LOGFILE \
    --regressionFile=$REGRESSIONFILE --language=en $EXTRAOPTS $MYDIR/$i \
    >$MYDIR/tmp/.test.stdout 2>$MYDIR/tmp/.test.stderr
   # --regressionFile is broken since 5.0.244.0, so we don't use its output
   RETVAL=$?
   RESULT=""
   fi

  # Being optimistic
  RESULTCLASS="ok"
  accepted=1
  errortype=0

  if [ $RETVAL = 124 ]; then
   RESULT=""
   TIME=timeout
   errortype=1
   accepted=0
  else
   # --regressionFile is broken since 5.0.244.0, so we don't use its output:
   # in desktop $REGRESSIONFILE does not properly contain the output of the Prove* command. So, a workaround (mostly copied from "Web"):
   if [ "$RESULT" = "" -o "$RESULT" = "?" ]; then
    grep --silent "OUTPUT for Prove:" $LOGFILE && \
     RESULT=`tac $LOGFILE | grep "OUTPUT for Prove:" | head -1 | sed 's/\(.*\) = \(.*\)/\2/'`
    grep --silent "OUTPUT for ProveDetails:" $LOGFILE && \
     RESULT=`tac $LOGFILE | grep "OUTPUT for ProveDetails:" | head -1 | perl -pe 's/(.*?) = (.*)/\2/' |\
     sed s/{//g | sed s/}//g | sed s/*/·/g`
    RESULT=`echo $RESULT | sed s/\"//g`
    # FIXME in GeoGebra.
    fi
   TIME=`cat $LOGFILE | grep Benchmarking | awk '{s=s+$5; print s}' | tail -1` # collecting all entries
   if [ $DEBUG = 1 ]; then
    cp $REGRESSIONFILE $REGRESSIONFILE-$TEST-$j
    cp $LOGFILE $LOGFILE-$TEST-$j
    cp $MYDIR/tmp/.test.stdout $MYDIR/tmp/.test.stdout-$TEST-$j
    cp $MYDIR/tmp/.test.stderr $MYDIR/tmp/.test.stderr-$TEST-$j
    fi
   fi # No timeout
  if [ "$TIME" = "" ]; then
   # Probably running the process was unsuccessful (maybe killed for another reason than 124).
   # In this case we assume "timeout" and clean $RESULT (which should have been cleaned up earlier, actually, FIXME):
   RESULT=""
   TIME=timeout
   errortype=3
   accepted=0
   fi
  echo -n "$RESULT;$TIME;"
  DIRNAMELENGTH=${#DIRNAME}
  if [ "${RESULT:0:$DIRNAMELENGTH}" != "$DIRNAME" ]; then
   if [ "$RESULT" = "undefined" -o "$RESULT" = "" -o "$RESULT" = "?" ]; then
    RESULTCLASS="undefined"
    accepted=null
   else
    RESULTCLASS="error"
    accepted=0
    errortype=2
    fi
  else
   echo "$TIME" >> $MYDIR/tmp/rinput-$j
   VARNAME=$`echo $j`
   VALUE=`eval echo $VARNAME`
   eval $j=`expr $VALUE + 1`
   fi

 speed="$TIME"
 if [ "$TIME" = timeout ]; then
  speed=null
  fi

  echo -n "insert into tests (testcase, prover, build_number, start_unixtime, result,
  osresult, timeout_setting, accepted, errortype, speed, regressionfile, logfile, stdout, stderr) values
  ('$TEST', '$j', '$BUILD_NUMBER', $start_unixtime, '$RESULT',
  $RETVAL, $TIMEOUT, $accepted, $errortype, $speed, '" > $MYDIR/tmp/testcmd.sql
  if [ "$DBDEBUG" = 0 ]; then
   echo -n > $REGRESSIONFILE
   echo -n > $LOGFILE
   echo -n > $MYDIR/tmp/.test.stdout
   echo -n > $MYDIR/tmp/.test.stderr
   fi
  cat $REGRESSIONFILE | sed s/"'"/"''"/g >> $MYDIR/tmp/testcmd.sql
  echo -n "', '" >> $MYDIR/tmp/testcmd.sql
  cat $LOGFILE | sed s/"'"/"''"/g >> $MYDIR/tmp/testcmd.sql
  echo -n "', '" >> $MYDIR/tmp/testcmd.sql
  cat $MYDIR/tmp/.test.stdout | sed s/"'"/"''"/g >> $MYDIR/tmp/testcmd.sql
  echo -n "', '" >> $MYDIR/tmp/testcmd.sql
  cat $MYDIR/tmp/.test.stderr | sed s/"'"/"''"/g >> $MYDIR/tmp/testcmd.sql
  echo "');" >> $MYDIR/tmp/testcmd.sql
  cat $MYDIR/tmp/testcmd.sql | sqlite3 $MYDIR/sqlite3db

  done # All provers done for this tests

 echo
 done # All tests done

